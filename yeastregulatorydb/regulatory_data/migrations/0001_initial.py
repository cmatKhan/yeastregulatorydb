# Generated by Django 4.2.8 on 2023-12-11 03:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Binding",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.CharField(
                        default="none",
                        help_text="A batch identifier for a set of data, eg the run number in the case of calling cards",
                        max_length=20,
                    ),
                ),
                ("replicate", models.PositiveIntegerField(default=1, help_text="Replicate number")),
                (
                    "source_orig_id",
                    models.CharField(
                        default="none",
                        help_text="If the data was provided by a third party, and that data has a unique identifier, it is provided here. Otherwise, the value  is `none`",
                        max_length=20,
                    ),
                ),
                (
                    "strain",
                    models.CharField(
                        default="unknown",
                        help_text="If the strain identifier is known, it is provided. Otherwise, the value is `unknown`",
                        max_length=20,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                (
                    "genomic_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes labelled as `genomic` in the ChrMap table",
                    ),
                ),
                (
                    "mito_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes labelled as mitochondrial in the ChrMap table",
                    ),
                ),
                (
                    "plasmid_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to contigs labelled as plasmid in the ChrMap table",
                    ),
                ),
                ("notes", models.CharField(default="none", max_length=100)),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "binding",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin.FileUploadMixin,
            ),
        ),
        migrations.CreateModel(
            name="CallingCardsBackground",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="The name of the background data", max_length=10, unique=True)),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                ("genomic_inserts", models.PositiveIntegerField(default=0)),
                ("mito_inserts", models.PositiveIntegerField(default=0)),
                ("plasmid_inserts", models.PositiveIntegerField(default=0)),
                ("notes", models.CharField(default="none", max_length=100)),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "callingcardsbackground",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin.FileUploadMixin,
            ),
        ),
        migrations.CreateModel(
            name="ChrMap",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("refseq", models.CharField(help_text="RefSeq chr identifiers", max_length=12, unique=True)),
                ("igenomes", models.CharField(help_text="iGenomes chr identifiers", max_length=12, unique=True)),
                ("ensembl", models.CharField(help_text="Ensembl chr identifiers", max_length=12, unique=True)),
                ("ucsc", models.CharField(help_text="UCSC chr identifiers", max_length=12, unique=True)),
                ("mitra", models.CharField(help_text="Mitra chr identifiers", max_length=15, unique=True)),
                ("numbered", models.CharField(help_text="Numbered chr identifiers", max_length=12, unique=True)),
                ("chr", models.CharField(help_text="Chromosome number or identifier", max_length=12, unique=True)),
                ("seqlength", models.PositiveIntegerField(help_text="Sequence length of a given chromosome/contig")),
                (
                    "type",
                    models.CharField(
                        choices=[("genomic", "genomic"), ("mito", "mito"), ("plasmid", "plasmid")],
                        default="genomic",
                        help_text="Chromosome type, one of genomic, mito or plasmid",
                        max_length=8,
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chrmap",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Expression",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.CharField(
                        default="undefined",
                        help_text="A batch identifier for a set of data, eg the run number in the case of calling cards",
                        max_length=20,
                    ),
                ),
                ("replicate", models.PositiveIntegerField(default=1, help_text="Replicate number")),
                (
                    "control",
                    models.CharField(
                        choices=[("undefined", "undefined"), ("wt", "wt"), ("wt_mata", "wt_mata")],
                        default="undefined",
                        help_text="Intended for micro-array data, this field records the control strain used to generate the relative intensity data",
                    ),
                ),
                (
                    "mechanism",
                    models.CharField(
                        choices=[("gev", "gev"), ("zev", "zev"), ("tfko", "tfko")],
                        default="undefined",
                        help_text="The mechanism by which the regulator was perturbed",
                        max_length=10,
                    ),
                ),
                (
                    "restriction",
                    models.CharField(
                        choices=[("undefined", "undefined"), ("P", "P"), ("M", "M"), ("N", "N")],
                        default="undefined",
                        help_text="This is a feature of the McIsaac ZEV data",
                        max_length=10,
                    ),
                ),
                ("time", models.PositiveIntegerField(default=0, help_text="Timepoint of the experiment in minutes")),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores gene expression data that results from a given regulator perturbation",
                        upload_to="temp",
                    ),
                ),
                (
                    "notes",
                    models.CharField(default="none", help_text="Free entry notes about the data", max_length=100),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expression",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin.FileUploadMixin,
            ),
        ),
        migrations.CreateModel(
            name="GenomicFeature",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("start", models.PositiveIntegerField(db_index=True)),
                ("end", models.PositiveIntegerField(db_index=True)),
                (
                    "strand",
                    models.CharField(
                        choices=[("+", "+"), ("-", "-"), ("*", "*")], db_index=True, default="*", max_length=1
                    ),
                ),
                ("type", models.CharField(default="unknown", max_length=30)),
                ("biotype", models.CharField(default="unknown", max_length=20)),
                ("locus_tag", models.CharField(default="unknown", max_length=20, unique=True)),
                ("symbol", models.CharField(default="unknown", max_length=20)),
                ("source", models.CharField(max_length=50)),
                ("alias", models.CharField(default="unknown", max_length=150)),
                ("note", models.CharField(default="none", max_length=1000)),
                ("chr", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.chrmap")),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "genomicfeature",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PromoterSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=10, unique=True)),
                (
                    "file",
                    models.FileField(
                        help_text="A bed format file where each row describes a regulatory region of a given target feature, which is identified in the 'name' column by the GenomicFeature id",
                        upload_to="temp",
                    ),
                ),
                ("notes", models.CharField(default="none", max_length=100)),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "promoterset",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin.FileUploadMixin,
            ),
        ),
        migrations.CreateModel(
            name="Regulator",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("under_development", models.BooleanField(default=False)),
                ("notes", models.CharField(default="none", max_length=50)),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "regulator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="regulatory_data.genomicfeature"
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "regulator",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PromoterSetSig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                (
                    "background_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.callingcardsbackground",
                    ),
                ),
                (
                    "binding_id",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.binding"),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "promoter_id",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.promoterset"),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "promotersetsig",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.FileUploadWithIdMixin.FileUploadMixin,
            ),
        ),
        migrations.CreateModel(
            name="FileFormat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("fileformat", models.CharField(max_length=20, unique=True)),
                ("fields", models.CharField(max_length=200)),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fileformat",
            },
        ),
        migrations.CreateModel(
            name="ExpressionSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "lab",
                    models.CharField(
                        help_text="name of the lab that generated the data. Single word preferred. No spaces -- use `_` instead",
                        max_length=20,
                    ),
                ),
                (
                    "assay",
                    models.CharField(
                        help_text="name of the assay used to generate the data. Single word preferred. No spaces -- use `_` instead",
                        max_length=20,
                    ),
                ),
                (
                    "workflow",
                    models.CharField(
                        default="undefined",
                        help_text="If known, note how the data was processed. Single word preferred. No spaces -- use `_` instead",
                        max_length=50,
                    ),
                ),
                ("citation", models.CharField(default="ask_admin", help_text="citation for the data", max_length=200)),
                (
                    "description",
                    models.CharField(default="none", help_text="brief description of the data", max_length=200),
                ),
                (
                    "notes",
                    models.CharField(default="none", help_text="any additional notes about the data", max_length=100),
                ),
                (
                    "fileformat_id",
                    models.ForeignKey(
                        help_text="foreign key to the fileformat table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.fileformat",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expressionsource",
            },
        ),
        migrations.CreateModel(
            name="ExpressionManualQC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "strain_verified",
                    models.CharField(
                        choices=[("yes", "yes"), ("no", "no"), ("unverified", "unverified")],
                        default="unverified",
                        max_length=10,
                    ),
                ),
                (
                    "expression_id",
                    models.OneToOneField(
                        help_text="foreign key to the expression table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.expression",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expressionmanualqc",
            },
        ),
        migrations.AddField(
            model_name="expression",
            name="regulator_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.regulator"),
        ),
        migrations.AddField(
            model_name="expression",
            name="source_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.expressionsource"
            ),
        ),
        migrations.AddField(
            model_name="expression",
            name="uploader",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_uploader",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="BindingSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("lab", models.CharField(help_text="The name of the lab which generated the data", max_length=20)),
                ("assay", models.CharField(help_text="name of the assay used to generate the data", max_length=20)),
                (
                    "workflow",
                    models.CharField(
                        default="undefined",
                        help_text="The workflow used to generate the data, including version",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        default="none",
                        help_text="A description of the data. include a URL to github repo with scripts describing how the data was parsed",
                        max_length=100,
                    ),
                ),
                ("citation", models.CharField(default="ask_admin", help_text="citation for the data", max_length=200)),
                (
                    "notes",
                    models.CharField(
                        default="none",
                        help_text="Any additional notes about the source of the binding data",
                        max_length=100,
                    ),
                ),
                (
                    "fileformat_id",
                    models.ForeignKey(
                        help_text="Foreign key to the FileFormat table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.fileformat",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "bindingsource",
                "unique_together": {("lab", "assay", "workflow")},
            },
        ),
        migrations.CreateModel(
            name="BindingManualQC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "rank_response_pass",
                    models.BooleanField(
                        default=True,
                        help_text="True if at least one bin in the top 100 genes with a binding signal is statistically significantly greater than random",
                    ),
                ),
                (
                    "best_response_pass",
                    models.BooleanField(
                        default=True,
                        help_text="True if the only binding data that performs better is from the same binding source. Otherwise, False",
                    ),
                ),
                (
                    "data_usable",
                    models.BooleanField(
                        default=True,
                        help_text="`True` if there is no reason to believe the data has technical faults. Otherwise, `False`, which recommends against using the data in analysis",
                    ),
                ),
                (
                    "passing_replicate",
                    models.BooleanField(
                        default=True,
                        help_text="Primarily, and probably only, relevant to Calling Cards data. `True` if the replicate's hops should be counted towards the target hop count. `False` otherwise",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="unreviewed",
                        help_text="Free entry field for notes from the manual QC review",
                        max_length=100,
                    ),
                ),
                (
                    "binding_id",
                    models.OneToOneField(
                        help_text="Foreign key to the Binding table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.binding",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "BindingManualQC",
            },
        ),
        migrations.AddField(
            model_name="binding",
            name="regulator",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.regulator"),
        ),
        migrations.AddField(
            model_name="binding",
            name="source_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.bindingsource"),
        ),
        migrations.AddField(
            model_name="binding",
            name="uploader",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_uploader",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="binding",
            unique_together={("regulator", "batch", "replicate", "source_id")},
        ),
    ]
