# Generated by Django 4.2.8 on 2023-12-14 18:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Binding",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.CharField(
                        default="none",
                        help_text="A batch identifier for a set of data, eg the run number in the case of calling cards",
                        max_length=20,
                    ),
                ),
                ("replicate", models.PositiveIntegerField(default=1, help_text="Replicate number")),
                (
                    "source_orig_id",
                    models.CharField(
                        default="none",
                        help_text="If the data was provided by a third party, and that data has a unique identifier, it is provided here. Otherwise, the value  is `none`",
                        max_length=20,
                    ),
                ),
                (
                    "strain",
                    models.CharField(
                        default="unknown",
                        help_text="If the strain identifier is known, it is provided. Otherwise, the value is `unknown`",
                        max_length=20,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                (
                    "genomic_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes labelled as `genomic` in the ChrMap table",
                    ),
                ),
                (
                    "mito_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes labelled as mitochondrial in the ChrMap table",
                    ),
                ),
                (
                    "plasmid_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to contigs labelled as plasmid in the ChrMap table",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="none", help_text="free entry text field, no more than 100 char long", max_length=100
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "binding",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
        migrations.CreateModel(
            name="CallingCardsBackground",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="The name of the background data", max_length=10, unique=True)),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                (
                    "genomic_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes with type `genomic` in ChrMap",
                    ),
                ),
                (
                    "mito_inserts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of inserts which map to chromosomes with type `mitochondrial` in ChrMap",
                    ),
                ),
                (
                    "plasmid_inserts",
                    models.PositiveIntegerField(
                        default=0, help_text="The number of inserts which map to contigs with type `plasmid` in ChrMap"
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="none", help_text="free entry text field, no more than 100 char long", max_length=100
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "callingcardsbackground",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
        migrations.CreateModel(
            name="ChrMap",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("refseq", models.CharField(help_text="RefSeq chr identifiers", max_length=12, unique=True)),
                ("igenomes", models.CharField(help_text="iGenomes chr identifiers", max_length=12, unique=True)),
                ("ensembl", models.CharField(help_text="Ensembl chr identifiers", max_length=12, unique=True)),
                ("ucsc", models.CharField(help_text="UCSC chr identifiers", max_length=12, unique=True)),
                ("mitra", models.CharField(help_text="Mitra chr identifiers", max_length=15, unique=True)),
                ("numbered", models.CharField(help_text="Numbered chr identifiers", max_length=12, unique=True)),
                ("chr", models.CharField(help_text="Chromosome number or identifier", max_length=12, unique=True)),
                ("seqlength", models.PositiveIntegerField(help_text="Sequence length of a given chromosome/contig")),
                (
                    "type",
                    models.CharField(
                        choices=[("genomic", "genomic"), ("mito", "mito"), ("plasmid", "plasmid")],
                        default="genomic",
                        help_text="Chromosome type, one of genomic, mito or plasmid",
                        max_length=8,
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chrmap",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("lab", models.CharField(help_text="The name of the lab which generated the data", max_length=20)),
                ("assay", models.CharField(help_text="name of the assay used to generate the data", max_length=20)),
                (
                    "workflow",
                    models.CharField(
                        default="undefined",
                        help_text="The workflow used to generate the data, including version",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        default="none",
                        help_text="A description of the data. include a URL to github repo with scripts describing how the data was parsed",
                        max_length=100,
                    ),
                ),
                ("citation", models.CharField(default="ask_admin", help_text="citation for the data", max_length=200)),
                (
                    "notes",
                    models.CharField(
                        default="none",
                        help_text="Any additional notes about the source of the binding data",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "db_table": "datasource",
            },
        ),
        migrations.CreateModel(
            name="Expression",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.CharField(
                        default="undefined",
                        help_text="A batch identifier for a set of data, eg the run number in the case of calling cards",
                        max_length=20,
                    ),
                ),
                ("replicate", models.PositiveIntegerField(default=1, help_text="Replicate number")),
                (
                    "control",
                    models.CharField(
                        choices=[("undefined", "undefined"), ("wt", "wt"), ("wt_meta", "wt_meta")],
                        default="undefined",
                        help_text="Intended for micro-array data, this field records the control strain used to generate the relative intensity data",
                    ),
                ),
                (
                    "mechanism",
                    models.CharField(
                        choices=[("gev", "gev"), ("zev", "zev"), ("tfko", "tfko")],
                        default="undefined",
                        help_text="The mechanism by which the regulator was perturbed",
                        max_length=10,
                    ),
                ),
                (
                    "restriction",
                    models.CharField(
                        choices=[("undefined", "undefined"), ("P", "P"), ("M", "M"), ("N", "N")],
                        default="undefined",
                        help_text="This is a feature of the McIsaac ZEV data",
                        max_length=10,
                    ),
                ),
                ("time", models.PositiveIntegerField(default=0, help_text="Timepoint of the experiment in minutes")),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores gene expression data that results from a given regulator perturbation",
                        upload_to="temp",
                    ),
                ),
                (
                    "notes",
                    models.CharField(default="none", help_text="Free entry notes about the data", max_length=100),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expression",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
        migrations.CreateModel(
            name="FileFormat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "fileformat",
                    models.CharField(
                        help_text="A file format name. This should be short, eg 'bed' or 'qbed' or 'tsv'",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "fields",
                    models.JSONField(
                        help_text='A JSON key:value set of columns and expected datatypes. Eg {"chr": "str","start": "int","end": "int","name": "str","score": "float","strand": ["+", "-", "*"]}'
                    ),
                ),
                (
                    "separator",
                    models.CharField(
                        choices=[("\t", "tab"), (",", "comma")],
                        default="\t",
                        help_text="The separator used in the file. Defaults to tab.",
                        max_length=2,
                    ),
                ),
                (
                    "effect_col",
                    models.CharField(
                        default="none",
                        help_text="The name of the column that should be used as the default effect column. Eg 'score'. Defaults to 'none' if there is no effect column.",
                        max_length=40,
                    ),
                ),
                (
                    "pval_col",
                    models.CharField(
                        default="none",
                        help_text="The name of the column that should be used as the default p-value column. Eg 'pvalue'. Defaults to 'none' if there is no p-value column.",
                        max_length=40,
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "fileformat",
            },
        ),
        migrations.CreateModel(
            name="GenomicFeature",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("start", models.PositiveIntegerField(db_index=True, help_text="start position of the feature")),
                ("end", models.PositiveIntegerField(db_index=True, help_text="end position of the feature")),
                (
                    "strand",
                    models.CharField(
                        choices=[("+", "+"), ("-", "-"), ("*", "*")],
                        db_index=True,
                        default="*",
                        help_text="strand of the feature, one of +, -, or *",
                        max_length=1,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="unknown",
                        help_text="CharField with a max length of 30, representing the type of the genomic feature, eg 'gene' or 'tRNA_gene'",
                        max_length=30,
                    ),
                ),
                (
                    "locus_tag",
                    models.CharField(
                        default="unknown",
                        help_text="CharField with a max length of 20 and a unique constraint, representing the locus tag of the feature, eg YAL001C",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        default="unknown",
                        help_text="CharField with a max length of 20, representing the feature symbol (eg GAL4)",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        help_text="CharField with a max length of 50, representing the source of the feature information",
                        max_length=50,
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        default="unknown",
                        help_text="CharField with a max length of 150, representing the alias of the feature",
                        max_length=150,
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        default="none",
                        help_text="CharField with a max length of 1000, representing any notes about the feature",
                        max_length=1000,
                    ),
                ),
                (
                    "chr",
                    models.ForeignKey(
                        help_text="foreign key to the `id` field of ChrMap",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.chrmap",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "genomicfeature",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PromoterSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the promoter set, eg `orf` or `yiming`", max_length=10, unique=True
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="A bed format file where each row describes a regulatory region of a given target feature, which is identified in the 'name' column by the GenomicFeature id",
                        upload_to="temp",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="none", help_text="free entry text field, no more than 100 char long", max_length=100
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "promoterset",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
        migrations.CreateModel(
            name="Regulator",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "under_development",
                    models.BooleanField(
                        default=False,
                        help_text="whether the regulator is being currently interrogated in any experiments",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="none", help_text="free entry text field, no more than 50 char long", max_length=50
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "regulator",
                    models.ForeignKey(
                        help_text="foreign key to the `id` field of GenomicFeature",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="regulatory_data.genomicfeature",
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "regulator",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PromoterSetSig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores data on regulator/DNA interaction", upload_to="temp"
                    ),
                ),
                (
                    "background",
                    models.ForeignKey(
                        blank=True,
                        help_text="foreign key to the 'CallingCardsBackground' table",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.callingcardsbackground",
                    ),
                ),
                (
                    "binding",
                    models.ForeignKey(
                        help_text="foreign key to the 'Binding' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.binding",
                    ),
                ),
                (
                    "fileformat",
                    models.ForeignKey(
                        help_text="foreign key to the 'FileFormat' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.fileformat",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "promoter",
                    models.ForeignKey(
                        help_text="foreign key to the 'promoter' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.promoterset",
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "promotersetsig",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
        migrations.CreateModel(
            name="ExpressionManualQC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "strain_verified",
                    models.CharField(
                        choices=[("yes", "yes"), ("no", "no"), ("unverified", "unverified")],
                        default="unverified",
                        help_text="whether the strain is verified",
                        max_length=10,
                    ),
                ),
                (
                    "expression",
                    models.OneToOneField(
                        help_text="foreign key to the expression table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.expression",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expressionmanualqc",
            },
        ),
        migrations.AddField(
            model_name="expression",
            name="regulator",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.regulator"),
        ),
        migrations.AddField(
            model_name="expression",
            name="source",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.datasource"),
        ),
        migrations.AddField(
            model_name="expression",
            name="uploader",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_uploader",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="datasource",
            name="fileformat",
            field=models.ForeignKey(
                help_text="Foreign key to the FileFormat table",
                on_delete=django.db.models.deletion.CASCADE,
                to="regulatory_data.fileformat",
            ),
        ),
        migrations.AddField(
            model_name="datasource",
            name="modifier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_modifier",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="datasource",
            name="uploader",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_uploader",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="BindingManualQC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "rank_response_pass",
                    models.BooleanField(
                        default=True,
                        help_text="True if at least one bin in the top 100 genes with a binding signal is statistically significantly greater than random",
                    ),
                ),
                (
                    "best_response_pass",
                    models.BooleanField(
                        default=True,
                        help_text="True if the only binding data that performs better is from the same binding source. Otherwise, False",
                    ),
                ),
                (
                    "data_usable",
                    models.BooleanField(
                        default=True,
                        help_text="`True` if there is no reason to believe the data has technical faults. Otherwise, `False`, which recommends against using the data in analysis",
                    ),
                ),
                (
                    "passing_replicate",
                    models.BooleanField(
                        default=True,
                        help_text="Primarily, and probably only, relevant to Calling Cards data. `True` if the replicate's hops should be counted towards the target hop count. `False` otherwise",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        default="unreviewed",
                        help_text="Free entry field for notes from the manual QC review",
                        max_length=100,
                    ),
                ),
                (
                    "binding",
                    models.OneToOneField(
                        help_text="Foreign key to the Binding table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.binding",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "bindingmanualqc",
            },
        ),
        migrations.AddField(
            model_name="binding",
            name="regulator",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.regulator"),
        ),
        migrations.AddField(
            model_name="binding",
            name="source",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="regulatory_data.datasource"),
        ),
        migrations.AddField(
            model_name="binding",
            name="uploader",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_uploader",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="genomicfeature",
            constraint=models.CheckConstraint(check=models.Q(("start__gt", 0)), name="start_cannot_be_less_than_one"),
        ),
        migrations.AlterUniqueTogether(
            name="datasource",
            unique_together={("lab", "assay", "workflow")},
        ),
        migrations.AlterUniqueTogether(
            name="binding",
            unique_together={("regulator", "batch", "replicate", "source")},
        ),
    ]
