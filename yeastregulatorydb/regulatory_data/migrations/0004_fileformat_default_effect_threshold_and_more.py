# Generated by Django 4.2.8 on 2023-12-19 15:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("regulatory_data", "0003_datasource_name_alter_binding_regulator_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="fileformat",
            name="default_effect_threshold",
            field=models.FloatField(
                default=0.0, help_text="The default threshold for the effect column. Defaults to 0.0."
            ),
        ),
        migrations.AddField(
            model_name="fileformat",
            name="default_pvalue_threshold",
            field=models.FloatField(
                default=1.0, help_text="The default threshold for the p-value column. Defaults to 1.0."
            ),
        ),
        migrations.AddField(
            model_name="fileformat",
            name="feature_identifier_col",
            field=models.CharField(
                default="none",
                help_text="The name of the column that should be used as the default feature identifier column. Eg 'name'. Defaults to 'none'.",
                max_length=40,
            ),
        ),
        migrations.CreateModel(
            name="RankResponse",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("upload_date", models.DateField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "expression_effect_threshold",
                    models.FloatField(
                        default=0,
                        help_text="The threshold (absolute value) at which to label a gene as 'responsive' in the expression data. Works in conjunction with `expression_pvalue_threshold'. Default is 0",
                    ),
                ),
                (
                    "expression_pvalue_threshold",
                    models.FloatField(
                        default=1,
                        help_text="The threshold at which to label a gene as 'responsive' in the expression data. Works in conjunction with `expression_effect_threshold`. Default is 1",
                    ),
                ),
                (
                    "normalized",
                    models.BooleanField(
                        default=False,
                        help_text="This indicates whether the data has been normalized to have the same number of responsive genes across expression data sets. Default is False. WARNING: not yet implemented -- all are `False`",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="A file which stores the rank response data for a given binding and expression set for a given regulator at specific expression effect and pvalue thresholds",
                        upload_to="temp",
                    ),
                ),
                (
                    "expression",
                    models.ForeignKey(
                        help_text="foreign key to the 'Expression' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.expression",
                    ),
                ),
                (
                    "fileformat",
                    models.ForeignKey(
                        help_text="foreign key to the 'FileFormat' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.fileformat",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modifier",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "promotersetsig",
                    models.ForeignKey(
                        help_text="foreign key to the 'PromoterSetSig' table",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="regulatory_data.promotersetsig",
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_uploader",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "rankresponse",
            },
            bases=(
                models.Model,
                yeastregulatorydb.regulatory_data.models.mixins.GzipFileUploadWithIdMixin.GzipFileUploadWithIdMixin,
            ),
        ),
    ]
